<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *      
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
        <ModulePrefs title="Hangout Starter">
                <Require feature="rpc" />
                <Require feature="views" />
                <Require feature="locked-domain" />
        </ModulePrefs>
        <Content type="html"><![CDATA[     

<html>

<style type="text/css">
<!--
.participant-item {
  cursor: pointer;
  padding-top: 10px;
  padding-bottom: 10px;
}

li.participant-item + li.participant-item {
    border-top: 1px solid #eee;
}

.text-muted {
  cursor: default;
}

#sidebar_container {
  float: left;
  width: 380px;
  padding: 20px;
}

#show_sidebar {
  /* Safari */
  -webkit-transform: rotate(-90deg);

  /* Firefox */
  -moz-transform: rotate(-90deg);

  /* IE */
  -ms-transform: rotate(-90deg);

  /* Opera */
  -o-transform: rotate(-90deg);

  /* Internet Explorer */
  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);

  position: absolute;
  top: 100px;
  margin: -25px;
  left: 0;
  cursor: pointer;
  display: none;
}

-->
</style>
<body>

<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">

<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">

<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>

<div id="container">
  <div id="show_sidebar">
    <span id="show_sidebar_label" style="font-size: 10pt;">Show Participants  &#9660;</span>
  </div>
  <div id="sidebar_container" style="overflow:scroll; position:relative;">
    <!-- <a id="hide_sidebar" style="float:right; font-size:14pt; padding: 5px; text-decoration:none; color:#00000; cursor: pointer;">&times;</a> -->
    <div class="legend"></div>
    <div id="sidebar_content">
        <div id="participantsDiv"></div>
    </div>
  </div>

</div>

<script>
  var CANVAS_WIDTH;
  var CANVAS_HEIGHT = 450;
  var MIN_WIDTH = 300;
  var current_conversant;
  var fake_mute;

  // Wait for gadget to load.
  gadgets.util.registerOnLoadHandler(init);

  function init() {
    // When API is ready...                                                         
    gapi.hangout.onApiReady.add(
      function(eventObj) {
        if (eventObj.isApiReady) {
            gapi.hangout.layout.setChatPaneVisible(false);
            setCanvas();
            showParticipants();
        }

        $(window).resize(function () {
            recenterCanvas();
        });

        gapi.hangout.onParticipantsAdded.add(
          function(eventObj) {
            var new_participants = eventObj.addedParticipants;
            for (var index in new_participants) {
              var participant = new_participants[index];
              var new_participant_listing = "";
              if (!participant.hasAppEnabled) {
                new_participant_listing += '<li id="hg' + participant.person.id + '" class="participant-item text-muted">' + participant.person.displayName + '</li>';
              } else {
                new_participant_listing += '<li id="hg' + participant.person.id + '" class="participant-item" onclick="triggerPrivateChannel(\'' + participant.id + '\', this)">' + participant.person.displayName + '</li>';
              }
              $("#participants-list").append(new_participant_listing);
              // Restrict visibility of this new participant to the local participant if they're currently in a hangout
              if (current_conversant != undefined) {
                gapi.hangout.av.setParticipantVisible(participant.id, false);
                gapi.hangout.av.setParticipantAudible(participant.id, false);
                gapi.hangout.av.setAvatar(participant.id, "https://raw.githubusercontent.com/jcambre/CS247-P4/hangouts/images/hidden.png");
              }
            }
          }
        );

        gapi.hangout.onParticipantsRemoved.add(
          function(eventObj) {
            var removed_participants = eventObj.removedParticipants;
            for (var index in removed_participants) {
              var participant = removed_participants[index];
              $("#hg" + participant.person.id).remove();
            }
          }
        );

      }
    );
  };

  $('#hide_sidebar').click(function() {
    $("#sidebar_container").hide();
    $("#show_sidebar").show();
    recenterCanvas();
  });

  $('#show_sidebar').click(function() {
    $("#sidebar_container").show();
    $("#show_sidebar").hide();
    recenterCanvas();
  });

  //LAYOUT AND VIDEO FEED CONTROLS:
  function setCanvas() {
    var feed = gapi.hangout.layout.getDefaultVideoFeed();
    var canvas = gapi.hangout.layout.getVideoCanvas();
    var newSize = canvas.setHeight(CANVAS_HEIGHT);
    CANVAS_WIDTH = newSize.width
    canvas.setVideoFeed(feed);
    canvas.setVisible(true);
    var leftOffset = 40;
    if ($("#sidebar_container").is(":visible")) {
      leftOffset += $("#sidebar_container").width();
    }
    canvas.setPosition(leftOffset, 45);
    recenterCanvas();
  };

  function recenterCanvas() {
    var canvas = gapi.hangout.layout.getVideoCanvas();
    canvas.setVisible(false);
    var effectiveWidth = 0;
    if ($("#sidebar_container").is(":visible")) {
      effectiveWidth += 380;
    }
    CANVAS_WIDTH = Math.max($("#container").width() - effectiveWidth - 40, MIN_WIDTH);
    var newSize = canvas.setWidth(CANVAS_WIDTH);
    CANVAS_HEIGHT = newSize.height;
    var maxheight = $(window).height()-30;
    if (CANVAS_HEIGHT > maxheight) {
      CANVAS_HEIGHT -= 30;
      newSize = canvas.setHeight(maxheight);
      CANVAS_WIDTH = newSize.width;
    }
    var leftOffset = 40;
    if ($("#sidebar_container").is(":visible")) {
      leftOffset += 380;
    } else {
      leftOffset = ($(window).width() - CANVAS_WIDTH)/2;
    }
    canvas.setPosition(leftOffset, 0);
    canvas.setVisible(true);
    $("#sidebar_container").height(CANVAS_HEIGHT);
  };

  function showParticipants() {
    var participants = gapi.hangout.getParticipants();

    var retVal = '<h3>Click on the name of a participant below to initiate a private conversation with that person<br/><small>If they accept, the two of you will only be able to hear one another, and the other members of the group won\'t be about to listen to your conversation. To end the conversation, click on the individual\'s name once again, and you will return to the full group conversation.</small></h3><ul id="participants-list">';

    for (var index in participants) {
      var participant = participants[index];

      // It's only possible to chat with a participant who actually has the app enabled, because if they don't they're not able to respond to the private conversation request
      if (!participant.hasAppEnabled) {
        retVal += '<li id="hg' + participant.person.id + '" class="participant-item text-muted">' + participant.person.displayName + '</li>';
      } else {
        retVal += '<li id="hg' + participant.person.id + '" class="participant-item" onclick="triggerPrivateChannel(\'' + participant.id + '\', this)">' + participant.person.displayName + '</li>';
      }
    }

    retVal += '</ul>';

    var div = document.getElementById('participantsDiv');

    div.innerHTML = retVal;
  };

  function triggerPrivateChannel(intended_partner, participant_label) {
    var participants = gapi.hangout.getParticipants();
    if (current_conversant == undefined) {
      $(participant_label).append('<span class="label label-warning pull-right">Requested...</span>');
      
      for (var index in participants) {
        var participant = participants[index];
        fake_mute = window.setTimeout(muteExcludedParticipants, 7000, participant, intended_partner, participant_label);
      }
      current_conversant = intended_partner;
    } else {
      // Currently already speaking with someone
      window.clearTimeout(fake_mute);
      for (var index in participants) {
        var participant = participants[index];
        if (participant.id == intended_partner) {
          participant_label.innerHTML = participant.person.displayName;
        }
        gapi.hangout.av.setParticipantVisible(participant.id, true);
        gapi.hangout.av.setParticipantAudible(participant.id, true);
        gapi.hangout.av.clearAvatar(participant.id);

      }
      current_conversant = undefined;
    }
  };

  function muteExcludedParticipants(participant, intended_partner, participant_label) {
    // MUTE and DISABLE EVERYONE EXCEPT THE INTENDED CONVERSATION PARTNER
    if (participant.id != intended_partner) {
      gapi.hangout.av.setParticipantVisible(participant.id, false);
      gapi.hangout.av.setParticipantAudible(participant.id, false);
      gapi.hangout.av.setAvatar(participant.id, "https://raw.githubusercontent.com/jcambre/CS247-P4/hangouts/images/hidden.png");

    }
    var label = $(participant_label).children('.label-warning').first();
    $(label).attr("class", "label label-success pull-right");
    $(label).html("Private chat in progress");
  };

</script>
</body>
]]>
</Content>
</Module>
